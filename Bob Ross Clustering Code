import numpy as np
from matplotlib import pyplot as plt
from IPython.display import HTML, display
from PIL import Image
import scipy as sp
import scipy.spatial.distance as spd
import scipy.cluster.hierarchy as sph
import sklearn as sk
import sklearn.ensemble as skens
import sklearn.naive_bayes as sknb
import sklearn.tree as sktree
import sklearn.metrics as skm
import sklearn.cluster as skc
import sklearn.decomposition as skd
import sklearn.mixture as skmix
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
sns.set(style='white', color_codes=True, font_scale=1.3)
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score
import matplotlib.cm as cm
import re
import os.path

%matplotlib inline

from IPython.core.display import HTML
css = open('style-table.css').read() + open('style-notebook.css').read()
HTML('<style>{}</style>'.format(css))

import numpy as np
from matplotlib import pyplot as plt
from IPython.display import HTML, display
from PIL import Image
import scipy as sp
import scipy.spatial.distance as spd
import scipy.cluster.hierarchy as sph
import sklearn as sk
import sklearn.ensemble as skens
import sklearn.naive_bayes as sknb
import sklearn.tree as sktree
import sklearn.metrics as skm
import sklearn.cluster as skc
import sklearn.decomposition as skd
import sklearn.mixture as skmix
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
sns.set(style='white', color_codes=True, font_scale=1.3)
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score
import matplotlib.cm as cm
import re
import os.path

%matplotlib inline

from IPython.core.display import HTML
css = open('style-table.css').read() + open('style-notebook.css').read()
HTML('<style>{}</style>'.format(css))



def getColors(img):
    im = Image.open(img, 'r')
    width, height = im.size
    pixel_values = list(im.getdata())
    cnt = np.zeros(85,dtype=int)
    for i in pixel_values:
        #print(i)
        r = int(i[0]/63)
        g = int(i[1]/63)<<2
        b = int(i[2]/63)<<4
        x = r | g | b
        cnt[x] = cnt[x] + 1
    cnt = cnt/sum(cnt)
    return(cnt)
    
    
    bob_ross = pd.DataFrame.from_csv("bob_ross.csv")


cols = ['c%s'%i for i in np.arange(0,85)]
colors = pd.DataFrame(columns=cols)
colors['EPISODE'] = bob_ross.index.values
colors = colors.set_index('EPISODE')

bob_ross['image'] = ""
for s in bob_ross.index.values:
    b = bob_ross.loc[s]['TITLE']
    b = b.lower()
    b = re.sub(r'[^a-z0-9\s]', '',b)
    b = re.sub(r'\s', '_',b)
    img = b+".png"
    exists = os.path.exists("images/"+img)
    if (exists):
        bob_ross.set_value(s,"image","images/"+img)
        t = getColors("images/"+img)
        colors.loc[s] = t

bob_ross = bob_ross.join(colors)
bob_ross = bob_ross[bob_ross.image != ""] 

color_columns = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10',
               'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'c17', 'c18', 'c19', 'c20',
               'c21', 'c22', 'c23', 'c24', 'c25', 'c26', 'c27', 'c28', 'c29', 'c30',
               'c31', 'c32', 'c33', 'c34', 'c35', 'c36', 'c37', 'c38', 'c39', 'c40',
               'c41', 'c42', 'c43', 'c44', 'c45', 'c46', 'c47', 'c48', 'c49', 'c50',
               'c51', 'c52', 'c53', 'c54', 'c55', 'c56', 'c57', 'c58', 'c59', 'c60',
               'c61', 'c62', 'c63', 'c64', 'c65', 'c66', 'c67', 'c68', 'c69', 'c70',
               'c71', 'c72', 'c73', 'c74', 'c75', 'c76', 'c77', 'c78', 'c79', 'c80',
               'c81', 'c82', 'c83', 'c84']
tag_columns = ['APPLE_FRAME', 'AURORA_BOREALIS', 'BARN', 'BEACH', 'BOAT',
       'BRIDGE', 'BUILDING', 'BUSHES', 'CABIN', 'CACTUS', 'CIRCLE_FRAME',
       'CIRRUS', 'CLIFF', 'CLOUDS', 'CONIFER', 'CUMULUS', 'DECIDUOUS',
       'DIANE_ANDRE', 'DOCK', 'DOUBLE_OVAL_FRAME', 'FARM', 'FENCE', 'FIRE',
       'FLORIDA_FRAME', 'FLOWERS', 'FOG', 'FRAMED', 'GRASS', 'GUEST',
       'HALF_CIRCLE_FRAME', 'HALF_OVAL_FRAME', 'HILLS', 'LAKE', 'LAKES',
       'LIGHTHOUSE', 'MILL', 'MOON', 'MOUNTAIN', 'MOUNTAINS', 'NIGHT', 'OCEAN',
       'OVAL_FRAME', 'PALM_TREES', 'PATH', 'PERSON', 'PORTRAIT',
       'RECTANGLE_3D_FRAME', 'RECTANGULAR_FRAME', 'RIVER', 'ROCKS',
       'SEASHELL_FRAME', 'SNOW', 'SNOWY_MOUNTAIN', 'SPLIT_FRAME', 'STEVE_ROSS',
       'STRUCTURE', 'SUN', 'TOMB_FRAME', 'TREE', 'TREES', 'TRIPLE_FRAME',
       'WATERFALL', 'WAVES', 'WINDMILL', 'WINDOW_FRAME', 'WINTER',
       'WOOD_FRAMED']
all_columns = color_columns + tag_columns + ['image']
color_columns = color_columns + ['image']
tag_columns = tag_columns + ['image']


def display_images(imagelist,cluster_title=None):
    a = imagelist.copy()
    np.zeros(7-len(a)%7,dtype=np.str)
    a = np.append(a,np.zeros(7-len(a)%7,dtype=np.str))
    grid = a.reshape(int(len(a)/7),7)
    text = ""
    if (cluster_title != None):
       text = "<h1>"+cluster_title+"</h1>\n" 
    text = text + "<table>"
    for i in np.arange(0,len(grid)):
        row = grid[i]
        line = ''.join( ["\n<TD><img style='width: 120px; margin: 0px; float: left; border: 1px solid black;' src='%s' /></TD>" % str(s) for s in row])
        text = text + "<TR>"+line+"</TR>\n"
    text = text +"</table>"
    display(HTML(text))
    
    display_images(bob_ross.image[0:12],"sample images")
    
    
    
    means_model = skc.KMeans(n_clusters=2).fit(bob_ross[tag_columns[:-1]])

centroids = means_model.cluster_centers_
cluster_labels = means_model.labels_
pd.value_counts(cluster_labels)
bob_ross["cluster"] = ['%d'%x for x in cluster_labels]

cluster0 = bob_ross[bob_ross.cluster == "0"]
display_images(cluster0.image[0:15])
cluster1 = bob_ross[bob_ross.cluster == "1"]
display_images(cluster1.image[0:15])


c1 = {}
for t in tag_columns:
    c1[t] = cluster0[t].sum()
del c1['image']
c1

c2 = {}
for t in tag_columns:
    c2[t] = cluster1[t].sum()
del c2['image']
c2


d = {}
for t in c1:
    d[t] = abs(c1[t] - c2[t])
d

def plotSilhouette(X,range_n_clusters=[2, 3, 4, 5, 6]):
    X = X.as_matrix()

    for n_clusters in range_n_clusters:
    
        fig, (ax1, ax2) = plt.subplots(1, 2)
        fig.set_size_inches(18, 7)

        ax1.set_xlim([-0.1, 1])

        ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])

        clusterer = KMeans(n_clusters=n_clusters, random_state=10)
        cluster_labels = clusterer.fit_predict(X)

        silhouette_avg = silhouette_score(X, cluster_labels)
        print("For n_clusters =", n_clusters,
              "The average silhouette_score is :", silhouette_avg)

        
        sample_silhouette_values = silhouette_samples(X, cluster_labels)

        y_lower = 10
        for i in range(n_clusters):
            ith_cluster_silhouette_values = \
                sample_silhouette_values[cluster_labels == i]

            ith_cluster_silhouette_values.sort()

            size_cluster_i = ith_cluster_silhouette_values.shape[0]
            y_upper = y_lower + size_cluster_i

            color = cm.spectral(float(i) / n_clusters)
            ax1.fill_betweenx(np.arange(y_lower, y_upper),
                              0, ith_cluster_silhouette_values,
                              facecolor=color, edgecolor=color, alpha=0.7)

            
            ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

            
            y_lower = y_upper + 10  

        ax1.set_title("The silhouette plot for the various clusters.")
        ax1.set_xlabel("The silhouette coefficient values")
        ax1.set_ylabel("Cluster label")

        
        ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

        ax1.set_yticks([])  
        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])

        
        colors = cm.spectral(cluster_labels.astype(float) / n_clusters)
        ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,
                    c=colors)

       
        centers = clusterer.cluster_centers_
        
        ax2.scatter(centers[:, 0], centers[:, 1],
                    marker='o', c="white", alpha=1, s=200)

        for i, c in enumerate(centers):
            ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)

        ax2.set_title("The visualization of the clustered data.")
        ax2.set_xlabel("Feature space for the 1st feature")
        ax2.set_ylabel("Feature space for the 2nd feature")

        plt.suptitle(("Silhouette analysis for KMeans clustering on sample data "
                      "with n_clusters = %d" % n_clusters),
                     fontsize=14, fontweight='bold')

        plt.show()

X = bob_ross[tag_columns[:-1]]

plotSilhouette(X)

K = range(2,11)

KM = [skc.KMeans(n_clusters=k).fit(X) for k in K]

silh_scores = [skm.silhouette_score(X,km.labels_) for km in KM]

kIdx = np.argmax(silh_scores)

plt.plot(K, silh_scores, 'b*-')
plt.plot(K[kIdx], silh_scores[kIdx], marker='o', markersize=12, 
         markeredgewidth=2, markeredgecolor='r', markerfacecolor='None')
plt.xlim(1, plt.xlim()[1])
plt.xlabel('Number of clusters');
plt.ylabel('Silhouette Coefficient');
plt.title('Silhouette Scores for k-means clustering');
